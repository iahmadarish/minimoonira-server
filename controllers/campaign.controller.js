import Campaign from '../models/campaign.model.js';

// GET /api/v1/campaign - ‡¶∏‡¶¨ campaigns
export const getCampaigns = async (req, res) => {
  try {
    console.log('üì® Fetching campaigns request received');
    
    const campaigns = await Campaign.find()
      .populate('targetCategory', 'name')
      .populate('targetProducts', 'name')
      .sort({ createdAt: -1 });

    console.log(`‚úÖ Found ${campaigns.length} campaigns`);

    res.json({
      success: true,
      data: campaigns,
      count: campaigns.length
    });
  } catch (error) {
    console.error('‚ùå Error fetching campaigns:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch campaigns',
      error: error.message
    });
  }
};

// POST /api/v1/campaign - ‡¶®‡¶§‡ßÅ‡¶® campaign create
export const createCampaign = async (req, res) => {
  try {
    console.log('üì® Create campaign request:', req.body);
    
    const campaign = new Campaign(req.body);
    await campaign.save();
    
    await campaign.populate('targetCategory', 'name');
    await campaign.populate('targetProducts', 'name');

    console.log('‚úÖ Campaign created successfully:', campaign._id);

    res.status(201).json({
      success: true,
      data: campaign,
      message: 'Campaign created successfully',
    });
  } catch (error) {
    console.error('‚ùå Error creating campaign:', error);
    res.status(400).json({
      success: false,
      message: error.message,
    });
  }
};

// PUT /api/v1/campaign/:id - campaign update
export const updateCampaign = async (req, res) => {
  try {
    console.log('üì® Update campaign request for ID:', req.params.id);
    
    // 1. ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá Document ‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    let campaign = await Campaign.findById(req.params.id); // <-- findById ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

    if (!campaign) {
      return res.status(404).json({
        success: false,
        message: 'Campaign not found',
      });
    }

    // 2. req.body ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá Document ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    // ‡¶è‡¶ü‡¶ø isModified() ‡¶´‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ó ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá
    Object.assign(campaign, req.body); 
    
    // 3. save() ‡¶Æ‡ßá‡¶•‡¶° ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
    // ‡¶è‡¶ü‡¶ø campaign.model.js-‡¶è ‡¶•‡¶æ‡¶ï‡¶æ pre('save') ‡¶π‡ßÅ‡¶ï‡¶ü‡¶ø‡¶ï‡ßá ‡¶ü‡ßç‡¶∞‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá
    await campaign.save(); // <-- ‡¶è‡¶ü‡¶ø‡¶á ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏

    // Populate fields for response
    await campaign.populate('targetCategory', 'name');
    await campaign.populate('targetProducts', 'name');

    console.log('‚úÖ Campaign updated successfully:', campaign._id);

    res.json({
      success: true,
      message: 'Campaign updated successfully',
      data: campaign,
    });
  } catch (error) {
    console.error('‚ùå Error updating campaign:', error);
    // Validation ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    const statusCode = error.name === 'ValidationError' ? 400 : 500;
    res.status(statusCode).json({
      success: false,
      message: error.message,
    });
  }
};

// DELETE /api/v1/campaign/:id - campaign delete
export const deleteCampaign = async (req, res) => {
  try {
    console.log('üì® Delete campaign request for ID:', req.params.id);
    
    const campaign = await Campaign.findByIdAndDelete(req.params.id);

    if (!campaign) {
      return res.status(404).json({
        success: false,
        message: 'Campaign not found',
      });
    }

    console.log('‚úÖ Campaign deleted successfully:', req.params.id);

    res.json({
      success: true,
      message: 'Campaign deleted successfully',
    });
  } catch (error) {
    console.error('‚ùå Error deleting campaign:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to delete campaign',
    });
  }
};

// GET /api/v1/campaign/:id - single campaign
export const getCampaignById = async (req, res) => {
  try {
    const campaign = await Campaign.findById(req.params.id)
      .populate('targetCategory', 'name')
      .populate('targetProducts', 'name');

    if (!campaign) {
      return res.status(404).json({
        success: false,
        message: 'Campaign not found',
      });
    }

    res.json({
      success: true,
      data: campaign,
    });
  } catch (error) {
    console.error('Error fetching campaign:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch campaign',
    });
  }
};