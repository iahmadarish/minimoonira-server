// models/user.model.js

import mongoose from 'mongoose';
import bcrypt from 'bcryptjs'; // ‚ö†Ô∏è ‡¶è‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶á‡¶®‡ßç‡¶∏‡¶ü‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®: npm install bcryptjs
import jwt from 'jsonwebtoken'; // ‚ö†Ô∏è ‡¶è‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶á‡¶®‡ßç‡¶∏‡¶ü‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®: npm install jsonwebtoken

const userSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: [true, 'Name is required'],
      trim: true,
      maxlength: 100,
    },
    email: {
      type: String,
      required: [true, 'Email is required'],
      unique: true,
      lowercase: true,
      trim: true,
      match: [/\S+@\S+\.\S+/, 'Please use a valid email address'],
    },
    password: {
      type: String,
      required: [true, 'Password is required'],
      minlength: [6, 'Password must be at least 6 characters'],
      select: false, // üõë ‡¶Ø‡¶ñ‡¶®‡¶á ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá DB ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶®‡¶æ ‡¶π‡¶¨‡ßá, ‡¶§‡¶ñ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§
    },
    role: {
      type: String,
      enum: ['user', 'admin', 'editor'],
      default: 'user',
    },
    phoneNumber: {
      type: String,
      trim: true,
    },
    shippingAddress: [
      {
        addressLine1: { type: String, required: true },
        addressLine2: { type: String },
        city: { type: String, required: true },
        zipCode: { type: String, required: true },
        country: { type: String, required: true, default: 'Bangladesh' },
        isDefault: { type: Boolean, default: false },
      },
    ],
    // ‡¶ï‡¶æ‡¶∞‡ßç‡¶ü ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ Cart ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡•§
  },
  {
    timestamps: true,
  }
);

// Mongoose Pre-Save Hook: ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶π‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®
userSchema.pre('save', async function (next) {
  // ‡¶Ø‡¶¶‡¶ø ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶Æ‡¶°‡¶ø‡¶´‡¶æ‡¶á ‡¶®‡¶æ ‡¶π‡¶Ø‡¶º, ‡¶§‡¶¨‡ßá ‡¶π‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á
  if (!this.isModified('password')) {
    return next();
  }

  // ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ï‡¶∞‡¶æ
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// Instance Method: ‡¶π‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ï‡¶∞‡¶æ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
userSchema.methods.matchPassword = async function (enteredPassword) {
  // this.password ‡¶è select: false ‡¶•‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º, ‡¶è‡¶á ‡¶Æ‡ßá‡¶•‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá .select('+password') ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
  return await bcrypt.compare(enteredPassword, this.password);
};

// Instance Method: JWT ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
userSchema.methods.getSignedJwtToken = function () {
  return jwt.sign({ id: this._id, role: this.role }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRE,
  });
};

const User = mongoose.model('User', userSchema);
export default User;