import express from "express";
import cors from "cors";
import helmet from "helmet";
// import rateLimit from "express-rate-limit";
import dotenv from "dotenv";
import mongoose from "mongoose";
import morgan from "morgan";
import cookieParser from 'cookie-parser';
import { errorHandler, notFound } from "./middlewares/errorMiddleware.js";
import heroContentRoutes from "./routes/heroContentRoutes.js";

// Routes
import categoryRoutes from "./routes/categoryRoutes.js";
import productRoutes from "./routes/product.routes.js";
import uploadRoutes from './routes/uploadRoutes.js';
import authRoutes from "./routes/authRoutes.js"
import cartRoutes from "./routes/cartRoutes.js"
import orderRoutes from "./routes/orderRoutes.js"
import adminRoutes from './routes/adminRoutes.js';
import paymentRoutes from "./routes/paymentRoutes.js"

import checkoutRoutes from "./routes/checkoutRoutes.js"
import adminOrderRoutes from './routes/adminOrderRoutes.js';
import analyticsRoutes from './routes/analyticsRoutes.js';
import reviewRoutes from "./routes/review.routes.js";
import heroRoutes from "./routes/heroRoutes.js";

// import adminRoutes from './routes/adminRoutes.js';

// Load environment variables
dotenv.config();

const app = express();

const PORT = process.env.PORT || 5000;
const API_VERSION = process.env.API_VERSION || "v1";

// ===== Database Connection =====
const connectDB = async () => {
┬а try {
┬а ┬а await mongoose.connect(process.env.MONGO_URI);
┬а ┬а console.log("==========================================");
┬а ┬а console.log("тЬЕ Database Connection: Successful ЁЯОЙ");
┬а ┬а console.log(`ЁЯУб Connected to MongoDB at: ${mongoose.connection.host}`);
┬а ┬а console.log("==========================================");
┬а } catch (err) {
┬а ┬а console.error("тЭМ Database Connection Failed:", err.message);
┬а ┬а process.exit(1);
┬а }
};
connectDB();

// ===== Security Middlewares =====
app.use(helmet());

const allowedOrigins = ['https://minimoonira.vercel.app', 'http://localhost:5173', 'http://localhost:5174', 'https://sandbox.sslcommerz.com','https://securepay.sslcommerz.com', 'https://conqueric.com', 'https://conqueric.com/ecommerce' ];

app.use(cors({
┬а origin: function (origin, callback) {
┬а ┬а 
┬а ┬а // ЁЯЪА рж╕ржорж╛ржзрж╛ржи: ржпржжрж┐ Origin 'null' рж╣ржпрж╝ (ржкрзЗржорзЗржирзНржЯ ржЧрзЗржЯржУржпрж╝рзЗ ржмрж╛ IPN ржПрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржШржЯрзЗ), рждржмрзЗ ржЕржирзБржорждрж┐ ржжрж╛ржУ
┬а ┬а if (!origin || origin === 'null') {
┬а ┬а   return callback(null, true);
┬а ┬а } 
    
    // ржпржжрж┐ OriginallowedOrigins ржП ржерж╛ржХрзЗ, рждржмрзЗ ржЕржирзБржорждрж┐ ржжрж╛ржУ
┬а ┬а if (allowedOrigins.indexOf(origin) !== -1) {
┬а ┬а ┬а callback(null, true);
┬а ┬а } else {
┬а ┬а ┬а // Log the blocked origin for debugging
┬а ┬а ┬а console.log(`CORS Error: Blocked origin ${origin}`); 
┬а ┬а ┬а callback(new Error('Not allowed by CORS'));
┬а ┬а }
┬а },
┬а credentials: true,
┬а allowedHeaders: ['Content-Type', 'Authorization'], 
}));

// Body parser for JSON
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Logging middleware (only in dev)
if (process.env.NODE_ENV !== "production") {
┬а app.use(morgan("dev"));
}

// ===== API Routes =====
app.use(`/api/${API_VERSION}/categories`, categoryRoutes);
app.use(`/api/${API_VERSION}/products`, productRoutes);
app.use(`/api/${API_VERSION}/upload`, uploadRoutes);
app.use(`/api/${API_VERSION}/auth`, authRoutes);
app.use(`/api/${API_VERSION}/cart`, cartRoutes);
app.use(`/api/${API_VERSION}/orders`, orderRoutes);
app.use(`/api/${API_VERSION}/payment`, paymentRoutes);
app.use(`/api/${API_VERSION}/checkout`, checkoutRoutes);
app.use('/api/v1/admin/orders', adminOrderRoutes);
app.use('/api/v1/admin/analytics', analyticsRoutes);
app.use("/api/v1/reviews", reviewRoutes);
app.use('/api/v1/admin', adminRoutes);
app.use(`/api/${API_VERSION}/hero`, heroContentRoutes);
app.use(`/api/${API_VERSION}/hero`, heroRoutes);

// web store CMS - Hero Content 

// app.use('/api/v1/admin', adminRoutes);
// ===== Health Check =====
app.get("/health", (req, res) => {
┬а res.status(200).json({
┬а ┬а status: "OK",
┬а ┬а message: "тЬЕ E-commerce API is running smoothly!",
┬а ┬а environment: process.env.NODE_ENV || "development",
┬а ┬а version: API_VERSION,
┬а ┬а timestamp: new Date().toISOString(),
┬а });
});

// ===== Error Handling =====
app.use(notFound);
app.use(errorHandler);

// ===== Start Server =====
app.listen(PORT, () => {
┬а console.log("==========================================");
┬а console.log(`ЁЯЪА Server is Live!`);
┬а console.log(`ЁЯМР URL: http://localhost:${PORT}/api/${API_VERSION}`);
┬а console.log(`тЪЩя╕П Mode: ${process.env.NODE_ENV || "development"}`);
┬а console.log("==========================================");
});
